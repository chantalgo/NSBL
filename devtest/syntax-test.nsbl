/**************************************
 *          1. STATEMENTS             *
 **************************************/


/******************************
 * 1.1 DECLARATION_STATEMENT  *
 ******************************/

//GRAPH declaration
graph g1,g2,g3;

//VERTEX declaration
vertex v1,v2,v3;

//VERTEX ATTRIBUTE declaration
string v1::name = "Tom";
int v1::age = 24;
float v1::height = 178.5;

//EDGE declaration
edge e1,e2,e3;

//EDGE ATTRIBUTE declaration
int e1::weight = 11;
string e1::relation = "friends";

//INT declaration and cast
int a=1,b=2,c=3;
int acast = (int)3.45;

//FLOAT declaration and cast
float af=1.1, bf=2.2, cf=3.3;
float afcast = (float)10;
acast = (float)afcast;

//STRING declaration
string s1="hellow world";
string s2="hellow", s3="world";

//Attribute declaration
vertex v;
string v::name = "Tom";
int v::age = 17;

//LIST declaration
list lv = [v1,v2,v3];
list le = [e1,e2,e3];
list empty = [];

/******************************
 * 1.2 EXPRESSION_STATEMENT   *
 *   ASSIGNMENT_EXPRESSION    *
 ******************************/

//VERTEX ATTRIBUTE assignment
//v1<:(name="Tom");      semantic error
v1.name = "Jack";
v1.age = 25;

//EDGE assignment
e1:v1->v2;
e3:v1->v3;
e1.weight = 14;

//LIST
vertex v4,v5;
lv <: v4;		// append one element
lv[0] = v5; 	// memeber operation

//GRAPH construction
//EAT operation
//construction from LIST
g1 <: lv;
g1 <: le;
//construction from VERTEX or EDGE
g2 <: v1;
g2 <: v2;
g2 <: e1;

//LIST operation
lv <: v4;                       //append operation
lv[1] = v5;                     //member

//INT and FLOAT assignment
a=1;
a=b=2;
a=2.04;
a=.8e10;
a=2.e5;
a=12.34E12;

//conditional expression
a<b;
a<=b;
a>b;
a>=-b;
a!=+b;
a<-(1+4);
a<-1;
a>+2;
a>+(4+a);
a<b || a<=b && a!=b;

//OP_ASSIGN expression
a=a++1;
a=a+-1;
a+=+1;
a*=-1;
a/=-2;
a-=+7;


/******************************
 * 1.3 SELECTION_STATEMENT    *
 ******************************/

if (a>1) {
}

if (a && b || !c) {
    a+=(3*243453);
}
else {
    b-=c;
}

if(a!=b)
    if(a<0)
        if(b<0)
            b = b-10;
        else
            b = b+10.4;
else{
    int c = 0;
    if(b>=c){
        c=c+1;
        a=a-1;
    }
}

if(a==0)
    a=a+1;
else if(b>=a&&a!=-1)
    b=b-a;
else
    b = 100;


/******************************
 * 1.4 ITERATION_STATEMENT    *
 ******************************/

//FOR loop
int i=0, j=100;
for(i=1;i<=j;i=i+1)a=b;
for(i=1; ;i=j)a=b;
for(i=1; i<=j; i=i+b)a=b;
for(i=1;i<=j;i=i+1){
    int m = 0;
    int n=1;
    m=n+2;
    int l=2;
    for(l=10; l<100; l=l+10){
        if(m>100)
            break;
        else
            continue;
        bool b = true;
        b = false;
    }
}

//FOREACH loop
//foreach (i:g.allV){}

//WHILE loop
a=100;
while(a>0){
    a=a-1;
    for(i=1;i<=j;i=i+1){
        int m = 0;
        int n=1;
        m=n+2;
        int l=2;
        for(i=10; i<100; i=i+10){
            bool b = true;
            b = false;
        }
    }
}



/**************************************
 *       2.GRAPTH OPERATIONS          *
 **************************************/

// GRAPH statement
//get all VERTICES
//g.allV;
list glist = g.allV;
//get all EDGEs
//g.allE;

//PIPE operation
g.allV|outE;

//MATCH operation
g.allV[@id==3];

//MATCH and PIPE
g.allV[@isfemale&&(@name=="TOM"||@age>28)]|outE[@weight==3]|endV;

//FUNCTION LITERAL + FOREACH + PIPE + MATCH
func cond():bool = { return (@name=="TOM"||@age>28); };
foreach (item : g.allV[cond()&&@isfemale] ) {
   print( item|outE[@weight==3]|endV );
}





/************************************** 
 *       3.DECLARATIONS               *
 **************************************/

/******************************
 * 3.1 FUNCTION DECLARATION   *
 ******************************/
int addition(int a, float b) {
    float c = a + b;
    return c;
}

int xx,a=1,b=2;
xx = addition(a,b);
void testvoid(){}

/**************************************
 * 3.2 FUNCTION LITERAL DECLARATION   *
 **************************************/
func addition(int a, float b):int = { return (int)a+b; };
xx = addition(a,b);

bool check(int c, int a, int b, func addition) {
	return c==addition(a,b);
}
